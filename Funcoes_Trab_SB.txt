;ADD
	add ebx,[nome da variavel]

;SUB
	sub ebx,[nome da variavel]

;MUL
	*Com sinal
	push eax ;Funcao imul multiplica o que esta em eax pelo operando, logo salvar o valor de eax
	mov eax,ebx ;Colocando o valor do acumulador ebx em eax
	imul dword [nome da variavel] ;Multiplicando o valor do acumulador pelo operando
	mov ebx,eax ;Armazenando resultado no acumulador ebx
	pop eax ;Devolvendo a eax seu valor original

	*Sem sinal
	push eax
	mov eax,ebx
	mul [nome da variavel]
	mov ebx,eax
	pop eax

;DIV
	*Com sinal
	push eax
	mov eax,ebx
	idiv dword [nome da variavel]
	mov ebx,eax
	pop eax

	*Sem sinal
	push eax
	mov eax,ebx
	div [nome da variavel]
	mov ebx,eax
	pop eax

;JMP
	jmp [nome]

;JMPN
	cmp ebx,0
	jl [nome]

;JMPP
	cmp ebx,0
	jg [nome]

;JMPZ
	cmp ebx,0
	je [nome]

;COPY 
	push eax
    mov eax,[N1]
    mov [nome da variavel],eax
    pop eax

;LOAD
    mov ebx,[nome da variavel]

;STORE
    mov [nome da variavel],ebx

;STOP
    mov eax,1
    mov ebx,0
    int 80h

INPUT: push EBP
	   mov EBP,ESP
	   push eax
       push ebx
	   push ecx
	   push edx
	   mov eax,3
	   mov ebx,2
	   mov ecx,[EBP+8]
	   mov edx,4
	   int 80h
	   pop edx
	   pop ecx
	   pop ebx
	   pop eax
	   mov ESP,EBP
	   pop EBP
	   ret 4

OUTPUT: push EBP
	    mov EBP,ESP
	    push eax
	    push ebx
	    push ecx
	    push edx
	    mov eax,4
	    mov ebx,1
	    mov ecx,[EBP+8]
	    mov edx,4
	    int 80h
	    pop edx
	    pop ecx
	    pop ebx
	    pop eax
	    mov ESP,EBP
	    pop EBP
	    ret	4

C_INPUT: push EBP ;push variavel antes (talvez mais um registrador)
		 mov EBP,ESP
		 push eax
		 push ebx
		 push ecx
		 push edx
		 mov eax,3
		 mov ebx,2
		 mov ecx,[EBP+20]
		 mov edx,1
		 int 80h
   		 Limpa_Buffer: mov eax,3
   		 			   mov ebx,0
   		 			   mov ecx,[EBP+20] 
   		 			   mov edx,1
   		 			   int 80h
   		 			   cmp byte [ecx],0ah
   		 			   jne Limpa_Buffer
   		 			   pop edx
   		 			   pop ecx
   		 			   pop ebx
   		 			   pop eax
   		 			   mov ESP,EBP
   		 			   pop EBP
   		 			   ret 4

